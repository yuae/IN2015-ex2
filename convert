#!/usr/bin/python3

import sys
import xml.etree.ElementTree as ET		

p_count = 0
t_count = 1
atrans = 1
aplace = 1


def classifyItems(root):
	tasks = []
	gates = []
	edges = []

	for item in root[0]:
		if 'startEvent' in item.tag:
			gates.append(item)
		if 'endEvent' in item.tag:
			gates.append(item)
		if 'Task' in item.tag:
			tasks.append(item)
		if 'Gateway' in item.tag:
			gates.append(item)
		if 'sequenceFlow' in item.tag:
			edges.append(item)
	return gates, tasks, edges

def inEdge(item):
	for child in item:
		if 'incoming' in child.tag:
			return child.text

def getPrev(edge, edgeList):
	for e in edgeList:
		if e.get('id') == edge:
			return e.get('sourceRef')

def outEdges(item):
	edgeId = []
	for child in item:
		if 'outgoing' in child.tag:
			edgeId.append(child.text)
	return edgeId

def getNext(edges, edgeList):
	next = []
	for curr in edges:
		for edge in edgeList:
			if edge.get('id') == curr:
				next.append(edge.get('targetRef'))
	return next

def determineType(id, gates, tasks):
	for p in gates:
		if p.get('id') == id:
			return [True, p]
	for t in tasks:
		if t.get('id') == id:
			return [False, t]

def traverse(curr, places, pTable, transitions, gates, tasks, edges):
	if curr == None:
		return
	
	for p in pTable:
		if curr.get('id') == p[0]:
			return
	
	for trans in transitions:
		if curr.get('id') == trans['id']:
			return 

	global p_count
	global t_count
	global atrans
	global aplace		
	
	if 'startEvent' in curr.tag:
		pTable.append([curr.get('id'), '"P'+str(p_count)+'"'])
		places.append('place "P'+str(p_count)+'" init 1;')
		p_count+=1
		oEdges = outEdges(curr)
		next = getNext(oEdges, edges)[0]
		[gate, nItem]  = determineType(next, gates, tasks)
		if gate:
			transitions.append({'id':'atrans'+str(atrans), 'index':str(t_count), 'label':'"artificail transition"', 'in':curr.get('id'), 'out':nItem.get('id')})
			atrans+=1
			t_count+=1
		traverse(nItem, places, pTable, transitions, gates, tasks, edges)

	if 'Task' in curr.tag:
		iEdge = inEdge(curr)
		prev = getPrev(iEdge, edges)
		oEdge = outEdges(curr)
		next = getNext(oEdge, edges)[0]
		[pGate, pItem]  = determineType(prev, gates, tasks)
		[nGate, nItem]  = determineType(next, gates, tasks)
		if not nGate:
			pTable.append(['artPlace'+str(aplace), '"P'+str(p_count)+'"'])
			places.append('place "P'+str(p_count)+';')
			p_count+=1
			if not pGate:
				transitions.append({'id':curr.get('id'), 'index':str(t_count), 'label':curr.get('name'), 'in':'artPlace'+str((aplace-1)), 'out':'artPlace'+str(aplace)})
			else:
				transitions.append({'id':curr.get('id'), 'index':str(t_count), 'label':curr.get('name'), 'in':pItem.get('id'), 'out':'artPlace'+str(aplace)})
			aplace+=1
			t_count+=1
		else:
			if not pGate:
				transitions.append({'id':curr.get('id'), 'index':str(t_count), 'label':curr.get('name'), 'in':'artPlace'+str((aplace-1)), 'out':nItem.get('id')})
			else:
				transitions.append({'id':curr.get('id'), 'index':str(t_count), 'label':curr.get('name'), 'in':pItem.get('id'), 'out':nItem.get('id')})
			t_count+=1	
		traverse(nItem, places, pTable, transitions, gates, tasks, edges)

	if 'Gateway' in curr.tag:
		pTable.append([curr.get('id'), '"P'+str(p_count)+'"'])
		places.append('place "P'+str(p_count)+'";')
		p_count+=1
		oEdges = outEdges(curr)
		next = getNext(oEdges, edges)
		for n in next:
			[nGate, nItem]  = determineType(n, gates, tasks)
			if nGate:
				transitions.append({'id':'atrans'+str(atrans), 'index':str(t_count), 'label':'artificial transition', 'in':curr.get('id'), 'out':nItem.get('id')})
				atrans+=1
				t_count+=1	
			traverse(nItem, places, pTable, transitions, gates, tasks, edges)

	if 'endEvent' in curr.tag:
		pTable.append([curr.get('id'), '"P'+str(p_count)+'"'])
		places.append('place "P'+str(p_count)+'";')
		p_count+=1
		return

def bpmnConverter(file):
	root = ET.parse(file).getroot()

	[gates, tasks, edges] = classifyItems(root)
	curr = gates[0]
	places = []
	pTable = []
	transitions = []

	traverse(curr, places, pTable, transitions, gates, tasks, edges)
	
	#print(pTable)

	for p in places:
		print(p)
	for t in transitions:
		#print(t)
		if t['label'] != '':
			print('trans "T'+t['index']+'"~"'+t['label']+'"')
		else:
			print('trans "T'+t['index']+'"')
		outPlace = []
		for p in pTable:
			if t['in'] == p[0]:
				print('   in', end=' ')
				print(p[1]+';')
		for p in pTable:
			if t['out'] == p[0]:
				print('   out', end=' ')
				print(p[1]+';')


def main(file):
	bpmnConverter(file)

if __name__ == "__main__":
	file = sys.argv[1]
	main(file)
